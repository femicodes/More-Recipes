'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getUserFavorites = exports.favoriteRecipe = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Recipe = _models2.default.Recipe,
    Favorite = _models2.default.Favorite;

// favourite a recipe
// POST ---> api/users/:userId/recipes/:recipeId 

var favoriteRecipe = exports.favoriteRecipe = function favoriteRecipe(req, res) {
	var recipeId = req.params.recipeId;
	var userId = req.userId;


	Favorite.findOne({
		where: {
			recipeId: recipeId, userId: userId
		}
	}).then(function (favorite) {
		if (favorite) {
			// console.log(favorite);
			return favorite.destroy().then(res.status(200).json({ success: true, message: 'Recipe have been removed from favorites!' }));

			// retun res.status(400).send({message: 'Recipe has already been added to favorites!'});
		}
		return Favorite.create({
			userId: userId,
			recipeId: recipeId
		}).then(function () {
			return res.status(200).json({ success: true, message: 'Recipe have been added to favorites!' });
		}).catch(function () {
			return res.status(500).json({ success: false, message: 'An error occured' });
		});
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'An error occured !' });
	});
};

// get user favourite
// GET ---> api/users/:userId/favourites
var getUserFavorites = exports.getUserFavorites = function getUserFavorites(req, res) {
	var userId = req.params.userId;


	Favorite.findAll({
		where: {
			userId: userId
		},
		include: [{
			model: Recipe
		}]
	}).then(function (favorites) {
		var favoritesCount = favorites.length;
		// console.log(favorites);
		if (favoritesCount == 0) {
			return res.status(200).json({
				success: true,
				message: 'User has no recipe in favorites'
			});
		}
		var recipes = favorites.map(function (fav) {
			return fav.Recipe;
		});
		return res.status(200).json({ success: true, message: favoritesCount + ' recipes found in favorite', recipes: recipes });
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'An error occured! ' });
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhdm9yaXRlLmpzIl0sIm5hbWVzIjpbIlJlY2lwZSIsIkZhdm9yaXRlIiwiZmF2b3JpdGVSZWNpcGUiLCJyZXEiLCJyZXMiLCJyZWNpcGVJZCIsInBhcmFtcyIsInVzZXJJZCIsImZpbmRPbmUiLCJ3aGVyZSIsInRoZW4iLCJmYXZvcml0ZSIsImRlc3Ryb3kiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJjcmVhdGUiLCJjYXRjaCIsImdldFVzZXJGYXZvcml0ZXMiLCJmaW5kQWxsIiwiaW5jbHVkZSIsIm1vZGVsIiwiZmF2b3JpdGVzQ291bnQiLCJmYXZvcml0ZXMiLCJsZW5ndGgiLCJyZWNpcGVzIiwibWFwIiwiZmF2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztJQUVRQSxNLG9CQUFBQSxNO0lBQVFDLFEsb0JBQUFBLFE7O0FBR2hCO0FBQ0E7O0FBQ08sSUFBTUMsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBQ25DQyxRQURtQyxHQUN0QkYsSUFBSUcsTUFEa0IsQ0FDbkNELFFBRG1DO0FBQUEsS0FFbkNFLE1BRm1DLEdBRXhCSixHQUZ3QixDQUVuQ0ksTUFGbUM7OztBQUkzQ04sVUFDRU8sT0FERixDQUNVO0FBQ1JDLFNBQU87QUFDTkoscUJBRE0sRUFDSUU7QUFESjtBQURDLEVBRFYsRUFNRUcsSUFORixDQU1RLG9CQUFZO0FBQ2xCLE1BQUlDLFFBQUosRUFBYztBQUNiO0FBQ0EsVUFBT0EsU0FDTEMsT0FESyxHQUVMRixJQUZLLENBRUFOLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLElBQVYsRUFBZ0JDLFNBQVMsMENBQXpCLEVBQXJCLENBRkEsQ0FBUDs7QUFJQTtBQUNBO0FBQ0QsU0FBT2YsU0FDTGdCLE1BREssQ0FDRTtBQUNQVixpQkFETztBQUVQRjtBQUZPLEdBREYsRUFLTEssSUFMSyxDQUtDO0FBQUEsVUFBTU4sSUFBSVMsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsSUFBVixFQUFnQkMsU0FBUyxzQ0FBekIsRUFBckIsQ0FBTjtBQUFBLEdBTEQsRUFNTEUsS0FOSyxDQU1FO0FBQUEsVUFBTWQsSUFBSVMsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxrQkFBMUIsRUFBckIsQ0FBTjtBQUFBLEdBTkYsQ0FBUDtBQVFBLEVBdkJGLEVBd0JFRSxLQXhCRixDQXdCUztBQUFBLFNBQU1kLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsb0JBQTFCLEVBQXJCLENBQU47QUFBQSxFQXhCVDtBQTBCQSxDQTlCTTs7QUFnQ1A7QUFDQTtBQUNPLElBQU1HLDhDQUFtQixTQUFuQkEsZ0JBQW1CLENBQUNoQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBRXJDRyxNQUZxQyxHQUUxQkosSUFBSUcsTUFGc0IsQ0FFckNDLE1BRnFDOzs7QUFJN0NOLFVBQ0VtQixPQURGLENBQ1U7QUFDUlgsU0FBTztBQUNORjtBQURNLEdBREM7QUFJUmMsV0FBUyxDQUFDO0FBQ1RDLFVBQU90QjtBQURFLEdBQUQ7QUFKRCxFQURWLEVBU0VVLElBVEYsQ0FTUSxxQkFBYTtBQUNuQixNQUFNYSxpQkFBa0JDLFVBQVVDLE1BQWxDO0FBQ0E7QUFDQSxNQUFLRixrQkFBa0IsQ0FBdkIsRUFBMkI7QUFDMUIsVUFBT25CLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMzQkMsYUFBUyxJQURrQjtBQUUzQkMsYUFBUztBQUZrQixJQUFyQixDQUFQO0FBSUE7QUFDRCxNQUFNVSxVQUFVRixVQUFVRyxHQUFWLENBQWU7QUFBQSxVQUFPQyxJQUFJNUIsTUFBWDtBQUFBLEdBQWYsQ0FBaEI7QUFDQSxTQUFPSSxJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxJQUFWLEVBQWdCQyxTQUFZTyxjQUFaLCtCQUFoQixFQUF3RUcsZ0JBQXhFLEVBQXJCLENBQVA7QUFDQSxFQXBCRixFQXFCRVIsS0FyQkYsQ0FxQlM7QUFBQSxTQUFNZCxJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLG9CQUExQixFQUFyQixDQUFOO0FBQUEsRUFyQlQ7QUFzQkEsQ0ExQk0iLCJmaWxlIjoiZmF2b3JpdGUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvVG9iaS9Nb3JlLVJlY2lwZXMvc2VydmVyL2NvbnRyb2xsZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGIgZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNvbnN0IHsgUmVjaXBlLCBGYXZvcml0ZSB9ID0gZGI7XHJcblxyXG5cclxuLy8gZmF2b3VyaXRlIGEgcmVjaXBlXHJcbi8vIFBPU1QgLS0tPiBhcGkvdXNlcnMvOnVzZXJJZC9yZWNpcGVzLzpyZWNpcGVJZCBcclxuZXhwb3J0IGNvbnN0IGZhdm9yaXRlUmVjaXBlID0gKHJlcSwgcmVzKSA9PiB7XHJcblx0Y29uc3QgeyByZWNpcGVJZCB9ID0gcmVxLnBhcmFtcztcclxuXHRjb25zdCB7IHVzZXJJZCB9ID0gcmVxO1xyXG5cclxuXHRGYXZvcml0ZVxyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHJlY2lwZUlkLCB1c2VySWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCBmYXZvcml0ZSA9PiB7XHJcblx0XHRcdGlmIChmYXZvcml0ZSkge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGZhdm9yaXRlKTtcclxuXHRcdFx0XHRyZXR1cm4gZmF2b3JpdGVcclxuXHRcdFx0XHRcdC5kZXN0cm95KCkgIFxyXG5cdFx0XHRcdFx0LnRoZW4ocmVzLnN0YXR1cygyMDApLmpzb24oe3N1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdSZWNpcGUgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSBmYXZvcml0ZXMhJ30pKTtcclxuXHJcblx0XHRcdFx0Ly8gcmV0dW4gcmVzLnN0YXR1cyg0MDApLnNlbmQoe21lc3NhZ2U6ICdSZWNpcGUgaGFzIGFscmVhZHkgYmVlbiBhZGRlZCB0byBmYXZvcml0ZXMhJ30pO1xyXG5cdFx0XHR9IFxyXG5cdFx0XHRyZXR1cm4gRmF2b3JpdGVcclxuXHRcdFx0XHQuY3JlYXRlKHtcclxuXHRcdFx0XHRcdHVzZXJJZCwgXHJcblx0XHRcdFx0XHRyZWNpcGVJZFxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LnRoZW4oICgpID0+IHJlcy5zdGF0dXMoMjAwKS5qc29uKHtzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnUmVjaXBlIGhhdmUgYmVlbiBhZGRlZCB0byBmYXZvcml0ZXMhJ30pKVxyXG5cdFx0XHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJlZCd9KSk7XHJcblx0XHRcdFxyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJlZCAhJ30pKTtcclxuXHJcbn07XHJcblxyXG4vLyBnZXQgdXNlciBmYXZvdXJpdGVcclxuLy8gR0VUIC0tLT4gYXBpL3VzZXJzLzp1c2VySWQvZmF2b3VyaXRlc1xyXG5leHBvcnQgY29uc3QgZ2V0VXNlckZhdm9yaXRlcyA9IChyZXEsIHJlcykgPT4ge1xyXG5cclxuXHRjb25zdCB7IHVzZXJJZCB9ID0gcmVxLnBhcmFtcztcclxuXHJcblx0RmF2b3JpdGUgXHJcblx0XHQuZmluZEFsbCh7XHJcblx0XHRcdHdoZXJlOiB7XHJcblx0XHRcdFx0dXNlcklkXHJcblx0XHRcdH0sXHJcblx0XHRcdGluY2x1ZGU6IFt7XHJcblx0XHRcdFx0bW9kZWw6IFJlY2lwZVxyXG5cdFx0XHR9XVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCBmYXZvcml0ZXMgPT4ge1xyXG5cdFx0XHRjb25zdCBmYXZvcml0ZXNDb3VudCA9ICBmYXZvcml0ZXMubGVuZ3RoO1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhmYXZvcml0ZXMpO1xyXG5cdFx0XHRpZiAoIGZhdm9yaXRlc0NvdW50ID09IDAgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IHRydWUsXHJcblx0XHRcdFx0XHRtZXNzYWdlOiAnVXNlciBoYXMgbm8gcmVjaXBlIGluIGZhdm9yaXRlcycsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgcmVjaXBlcyA9IGZhdm9yaXRlcy5tYXAoIGZhdiA9PiBmYXYuUmVjaXBlKTtcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiBgJHtmYXZvcml0ZXNDb3VudH0gcmVjaXBlcyBmb3VuZCBpbiBmYXZvcml0ZWAsIHJlY2lwZXN9KTsgXHJcblx0XHR9KVxyXG5cdFx0LmNhdGNoKCAoKSA9PiByZXMuc3RhdHVzKDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cmVkISAnfSkpO1xyXG59OyJdfQ==