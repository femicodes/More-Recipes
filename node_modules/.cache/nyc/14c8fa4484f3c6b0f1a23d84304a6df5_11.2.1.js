'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.postReview = exports.getReviews = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Review = _models2.default.Review;

// GET --> api/recipes/<recipeId>/reviews

var getReviews = exports.getReviews = function getReviews(req, res) {
	var recipeId = req.params.recipeId;


	Review.findAll({
		attributes: ['id', 'body', 'createdAt', 'updatedAt'],
		where: {
			recipeId: recipeId
		}
	}).then(function (reviews) {
		if (reviews.length == 0) return res.status(404).json({ success: true, message: 'No review found for this recipe' });
		return res.status(201).json(reviews);
	}).catch(function (err) {
		return res.status(404).json(err);
	});
};

// --> api/recipes/<recipeId>/reviews
var postReview = exports.postReview = function postReview(req, res) {
	var userId = req.userId;
	var content = req.body.content;
	var recipeId = req.params.recipeId;

	// check if the content of the review is valid 

	if (!content || !content.trim()) return res.status(400).json({ success: false, message: 'Review is required' });
	// check if the user have posted a review on the recipe before
	// a user can only post a review once. 
	Review.findOne({
		where: {
			recipeId: recipeId, userId: userId
		}
	}).then(function (review) {
		if (review) {
			return res.status(403).json({ success: false, message: 'You already wrote a review for this recipe' });
		} else {
			return Review.create({
				userId: userId,
				recipeId: recipeId,
				body: content
			}).then(function () {
				return res.status(200).json({ success: true, message: 'Your review have been recorded successfully' });
			}).catch(function (err) {
				return res.statu(500).json(err);
			});
		}
	}).catch(function (err) {
		return res.status(500).json(err);
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJldmlldy5qcyJdLCJuYW1lcyI6WyJSZXZpZXciLCJnZXRSZXZpZXdzIiwicmVxIiwicmVzIiwicmVjaXBlSWQiLCJwYXJhbXMiLCJmaW5kQWxsIiwiYXR0cmlidXRlcyIsIndoZXJlIiwidGhlbiIsInJldmlld3MiLCJsZW5ndGgiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJjYXRjaCIsImVyciIsInBvc3RSZXZpZXciLCJ1c2VySWQiLCJjb250ZW50IiwiYm9keSIsInRyaW0iLCJmaW5kT25lIiwicmV2aWV3IiwiY3JlYXRlIiwic3RhdHUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0lBRVFBLE0sb0JBQUFBLE07O0FBRVI7O0FBQ08sSUFBTUMsa0NBQWEsU0FBYkEsVUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBQ2hDQyxRQURnQyxHQUNwQkYsSUFBSUcsTUFEZ0IsQ0FDaENELFFBRGdDOzs7QUFHdkNKLFFBQ0VNLE9BREYsQ0FDVTtBQUNSQyxjQUFZLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZSxXQUFmLEVBQTRCLFdBQTVCLENBREo7QUFFUkMsU0FBTztBQUNOSjtBQURNO0FBRkMsRUFEVixFQU9FSyxJQVBGLENBT1EsbUJBQVc7QUFDakIsTUFBSUMsUUFBUUMsTUFBUixJQUFrQixDQUF0QixFQUNDLE9BQU9SLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLElBQVYsRUFBZ0JDLFNBQVMsaUNBQXpCLEVBQXJCLENBQVA7QUFDRCxTQUFPWixJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJILE9BQXJCLENBQVA7QUFDQSxFQVhGLEVBWUVNLEtBWkYsQ0FZUTtBQUFBLFNBQU9iLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQkksR0FBckIsQ0FBUDtBQUFBLEVBWlI7QUFhQSxDQWhCTTs7QUFrQlA7QUFDTyxJQUFNQyxrQ0FBYSxTQUFiQSxVQUFhLENBQUNoQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBQy9CZ0IsTUFEK0IsR0FDcEJqQixHQURvQixDQUMvQmlCLE1BRCtCO0FBQUEsS0FFL0JDLE9BRitCLEdBRW5CbEIsSUFBSW1CLElBRmUsQ0FFL0JELE9BRitCO0FBQUEsS0FJL0JoQixRQUorQixHQUlsQkYsSUFBSUcsTUFKYyxDQUkvQkQsUUFKK0I7O0FBTXZDOztBQUNBLEtBQUssQ0FBQ2dCLE9BQUQsSUFBWSxDQUFDQSxRQUFRRSxJQUFSLEVBQWxCLEVBQ0MsT0FBT25CLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsb0JBQTFCLEVBQXJCLENBQVA7QUFDRDtBQUNBO0FBQ0FmLFFBQ0V1QixPQURGLENBQ1U7QUFDUmYsU0FBTztBQUNOSixxQkFETSxFQUNJZTtBQURKO0FBREMsRUFEVixFQU1FVixJQU5GLENBTVEsa0JBQVU7QUFDaEIsTUFBSWUsTUFBSixFQUFZO0FBQ1gsVUFBT3JCLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsNENBQTFCLEVBQXJCLENBQVA7QUFDQSxHQUZELE1BRU87QUFDTixVQUFPZixPQUFPeUIsTUFBUCxDQUFjO0FBQ3BCTixrQkFEb0I7QUFFcEJmLHNCQUZvQjtBQUdwQmlCLFVBQU1EO0FBSGMsSUFBZCxFQUtMWCxJQUxLLENBS0M7QUFBQSxXQUFNTixJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxJQUFWLEVBQWdCQyxTQUFTLDZDQUF6QixFQUFyQixDQUFOO0FBQUEsSUFMRCxFQU1MQyxLQU5LLENBTUM7QUFBQSxXQUFPYixJQUFJdUIsS0FBSixDQUFVLEdBQVYsRUFBZWIsSUFBZixDQUFvQkksR0FBcEIsQ0FBUDtBQUFBLElBTkQsQ0FBUDtBQU9BO0FBQ0QsRUFsQkYsRUFtQkVELEtBbkJGLENBbUJTLGVBQU87QUFDZCxTQUFPYixJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJJLEdBQXJCLENBQVA7QUFDQSxFQXJCRjtBQXNCQSxDQWpDTSIsImZpbGUiOiJyZXZpZXcuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvVG9iaS9Nb3JlLVJlY2lwZXMvc2VydmVyL2NvbnRyb2xsZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGIgZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNvbnN0IHsgUmV2aWV3IH0gPSBkYjtcclxuXHJcbi8vIEdFVCAtLT4gYXBpL3JlY2lwZXMvPHJlY2lwZUlkPi9yZXZpZXdzXHJcbmV4cG9ydCBjb25zdCBnZXRSZXZpZXdzID0gKHJlcSwgcmVzKSA9PiB7XHJcblx0Y29uc3Qge3JlY2lwZUlkfSA9IHJlcS5wYXJhbXM7XHJcblxyXG5cdFJldmlld1xyXG5cdFx0LmZpbmRBbGwoe1xyXG5cdFx0XHRhdHRyaWJ1dGVzOiBbJ2lkJywgJ2JvZHknLCAnY3JlYXRlZEF0JywgJ3VwZGF0ZWRBdCddLFxyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHJlY2lwZUlkXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHQudGhlbiggcmV2aWV3cyA9PiB7XHJcblx0XHRcdGlmIChyZXZpZXdzLmxlbmd0aCA9PSAwKVxyXG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ05vIHJldmlldyBmb3VuZCBmb3IgdGhpcyByZWNpcGUnfSk7XHJcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbihyZXZpZXdzKTtcclxuXHRcdH0pXHJcblx0XHQuY2F0Y2goZXJyID0+IHJlcy5zdGF0dXMoNDA0KS5qc29uKGVycikpO1xyXG59O1xyXG5cclxuLy8gLS0+IGFwaS9yZWNpcGVzLzxyZWNpcGVJZD4vcmV2aWV3c1xyXG5leHBvcnQgY29uc3QgcG9zdFJldmlldyA9IChyZXEsIHJlcykgPT4ge1xyXG5cdGNvbnN0IHsgdXNlcklkIH0gPSByZXE7XHJcblx0Y29uc3QgeyBjb250ZW50IH0gPSByZXEuYm9keTsgXHJcblxyXG5cdGNvbnN0IHsgcmVjaXBlSWQgfSA9IHJlcS5wYXJhbXM7XHJcblxyXG5cdC8vIGNoZWNrIGlmIHRoZSBjb250ZW50IG9mIHRoZSByZXZpZXcgaXMgdmFsaWQgXHJcblx0aWYgKCAhY29udGVudCB8fCAhY29udGVudC50cmltKCkgKSBcclxuXHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdSZXZpZXcgaXMgcmVxdWlyZWQnfSk7XHJcblx0Ly8gY2hlY2sgaWYgdGhlIHVzZXIgaGF2ZSBwb3N0ZWQgYSByZXZpZXcgb24gdGhlIHJlY2lwZSBiZWZvcmVcclxuXHQvLyBhIHVzZXIgY2FuIG9ubHkgcG9zdCBhIHJldmlldyBvbmNlLiBcclxuXHRSZXZpZXdcclxuXHRcdC5maW5kT25lKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRyZWNpcGVJZCwgdXNlcklkXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHQudGhlbiggcmV2aWV3ID0+IHtcclxuXHRcdFx0aWYgKHJldmlldykge1xyXG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdZb3UgYWxyZWFkeSB3cm90ZSBhIHJldmlldyBmb3IgdGhpcyByZWNpcGUnfSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIFJldmlldy5jcmVhdGUoe1xyXG5cdFx0XHRcdFx0dXNlcklkLFxyXG5cdFx0XHRcdFx0cmVjaXBlSWQsXHJcblx0XHRcdFx0XHRib2R5OiBjb250ZW50XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdC50aGVuKCAoKSA9PiByZXMuc3RhdHVzKDIwMCkuanNvbih7c3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ1lvdXIgcmV2aWV3IGhhdmUgYmVlbiByZWNvcmRlZCBzdWNjZXNzZnVsbHknfSkpXHJcblx0XHRcdFx0XHQuY2F0Y2goZXJyID0+IHJlcy5zdGF0dSg1MDApLmpzb24oZXJyKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHQuY2F0Y2goIGVyciA9PiB7XHJcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbihlcnIpO1xyXG5cdFx0fSk7XHJcbn07Il19