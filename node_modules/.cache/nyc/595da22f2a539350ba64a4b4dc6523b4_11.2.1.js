'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.countVote = exports.voteRecipe = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Vote = _models2.default.Vote,
    Recipe = _models2.default.Recipe;

// upvote a recipe
// POST --> users/upvote/:recipeId

var voteRecipe = exports.voteRecipe = function voteRecipe(req, res, next) {
	var recipeId = parseInt(req.params.recipeId);

	var voteType = req.params.voteType;
	var userId = req.userId;

	// if votetype is not equal to down and up --> Error !

	if (voteType !== 'down' && voteType !== 'up') return res.status(400).send({
		success: false,
		message: 'invalid vote type'
	});

	Recipe.find({
		where: { id: recipeId, userId: userId }
	}).then(function (recipe) {

		if (recipe) {
			return res.status(403).json({ success: false, message: 'Cant vote on own recipe' });
		} else {

			// store upvotes as true and downvote as false --> basically convert vote to boolean
			// stores true when upvote and false when downvote
			var voteCond = voteType === 'up' ? true : false;
			Vote.findAll({
				where: {
					recipeId: recipeId
				}
			}).then(function (votes) {
				// get id of users that have voted 
				var alreadyVoted = votes.map(function (v) {
					return v.userId;
				});
				// if current user has voted, remove vote ! 
				if (alreadyVoted.includes(userId)) {

					var userVote = votes.filter(function (v) {
						return v.userId = userId;
					})[0];

					if (userVote.dataValues.voteType === voteCond) {
						return Vote.findById(userVote.id).then(function (vote) {
							return vote.destroy().then(function () {
								res.msg = voteType + 'vote removed successfully!';
								next();
							});
						});
					}
					// else create the vote. 
					return Vote.findById(userVote.id).then(function (vote) {
						return vote.update({
							voteType: voteCond
						}).then(function () {
							res.msg = 'Recipe ' + voteType + 'voted successfully!';
							next();
						});
					});
				}

				return Vote.create({ recipeId: recipeId, userId: userId, voteType: voteCond }).then(function () {
					res.msg = 'Recipe ' + voteType + 'voted successfully!';
					next();
				});
				// .catch( (err) => res.status(500).json({success: false, message: err}));
			});
		}
	});
};

// count vote ! 
var countVote = exports.countVote = function countVote(req, res) {
	var recipeId = parseInt(req.params.recipeId);

	Vote.findAll({
		where: {
			recipeId: recipeId
		}
	}).then(function (votes) {
		var upvoteCount = votes.filter(function (vote) {
			return vote.voteType === true;
		}).length;
		var downvoteCount = votes.filter(function (vote) {
			return vote.voteType === false;
		}).length;

		Recipe.findById(recipeId).then(function (recipe) {
			return recipe.update({ upvoteCount: upvoteCount, downvoteCount: downvoteCount }).then(function (recipe) {
				res.status(200).json({ success: true,
					message: res.msg,
					recipe: recipe
				});
			});
		});
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'cant vote recipe' });
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZvdGVzLmpzIl0sIm5hbWVzIjpbIlZvdGUiLCJSZWNpcGUiLCJ2b3RlUmVjaXBlIiwicmVxIiwicmVzIiwibmV4dCIsInJlY2lwZUlkIiwicGFyc2VJbnQiLCJwYXJhbXMiLCJ2b3RlVHlwZSIsInVzZXJJZCIsInN0YXR1cyIsInNlbmQiLCJzdWNjZXNzIiwibWVzc2FnZSIsImZpbmQiLCJ3aGVyZSIsImlkIiwidGhlbiIsInJlY2lwZSIsImpzb24iLCJ2b3RlQ29uZCIsImZpbmRBbGwiLCJhbHJlYWR5Vm90ZWQiLCJ2b3RlcyIsIm1hcCIsInYiLCJpbmNsdWRlcyIsInVzZXJWb3RlIiwiZmlsdGVyIiwiZGF0YVZhbHVlcyIsImZpbmRCeUlkIiwidm90ZSIsImRlc3Ryb3kiLCJtc2ciLCJ1cGRhdGUiLCJjcmVhdGUiLCJjb3VudFZvdGUiLCJ1cHZvdGVDb3VudCIsImxlbmd0aCIsImRvd252b3RlQ291bnQiLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7SUFFUUEsSSxvQkFBQUEsSTtJQUFNQyxNLG9CQUFBQSxNOztBQUVkO0FBQ0E7O0FBRU8sSUFBTUMsa0NBQWEsU0FBYkEsVUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUM3QyxLQUFNQyxXQUFXQyxTQUFTSixJQUFJSyxNQUFKLENBQVdGLFFBQXBCLENBQWpCOztBQUQ2QyxLQUdyQ0csUUFIcUMsR0FHeEJOLElBQUlLLE1BSG9CLENBR3JDQyxRQUhxQztBQUFBLEtBSXRDQyxNQUpzQyxHQUk1QlAsR0FKNEIsQ0FJdENPLE1BSnNDOztBQU03Qzs7QUFDQSxLQUFLRCxhQUFhLE1BQWIsSUFBdUJBLGFBQWEsSUFBekMsRUFDQyxPQUFPTCxJQUFJTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDM0JDLFdBQVMsS0FEa0I7QUFFM0JDLFdBQVM7QUFGa0IsRUFBckIsQ0FBUDs7QUFLRGIsUUFDRWMsSUFERixDQUNPO0FBQ0xDLFNB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RE87QUFFcEJmO0FBRm9CLEtBQXJCO0FBSUEsSUFOZSxDQUFWO0FBQUEsR0FGUjtBQVVBLEVBcEJGLEVBcUJFc0IsS0FyQkYsQ0FxQlM7QUFBQSxTQUFNckMsSUFBSU8sTUFBSixDQUFXLEdBQVgsRUFBZ0JTLElBQWhCLENBQXFCLEVBQUNQLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxrQkFBMUIsRUFBckIsQ0FBTjtBQUFBLEVBckJUO0FBc0JBLENBMUJNIiwiZmlsZSI6InZvdGVzLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1RvYmkvTW9yZS1SZWNpcGVzL3NlcnZlci9jb250cm9sbGVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRiIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCB7IFZvdGUsIFJlY2lwZSB9ID0gZGI7XHJcblxyXG4vLyB1cHZvdGUgYSByZWNpcGVcclxuLy8gUE9TVCAtLT4gdXNlcnMvdXB2b3RlLzpyZWNpcGVJZFxyXG5cclxuZXhwb3J0IGNvbnN0IHZvdGVSZWNpcGUgPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHRjb25zdCByZWNpcGVJZCA9IHBhcnNlSW50KHJlcS5wYXJhbXMucmVjaXBlSWQpO1xyXG5cclxuXHRjb25zdCB7IHZvdGVUeXBlIH0gPSByZXEucGFyYW1zO1xyXG5cdGNvbnN0IHt1c2VySWR9ID0gcmVxO1xyXG5cclxuXHQvLyBpZiB2b3RldHlwZSBpcyBub3QgZXF1YWwgdG8gZG93biBhbmQgdXAgLS0+IEVycm9yICFcclxuXHRpZiAoIHZvdGVUeXBlICE9PSAnZG93bicgJiYgdm90ZVR5cGUgIT09ICd1cCcgKSBcclxuXHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCh7XHJcblx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxyXG5cdFx0XHRtZXNzYWdlOiAnaW52YWxpZCB2b3RlIHR5cGUnXHJcblx0XHR9KTtcclxuXHRcclxuXHRSZWNpcGVcclxuXHRcdC5maW5kKHtcclxuXHRcdFx0d2hlcmU6IHtpZDogcmVjaXBlSWQsIHVzZXJJZH1cclxuXHRcdH0pXHJcblx0XHQudGhlbiggcmVjaXBlID0+IHtcclxuXHJcblx0XHRcdGlmIChyZWNpcGUpIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnQ2FudCB2b3RlIG9uIG93biByZWNpcGUnfSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIHN0b3JlIHVwdm90ZXMgYXMgdHJ1ZSBhbmQgZG93bnZvdGUgYXMgZmFsc2UgLS0+IGJhc2ljYWxseSBjb252ZXJ0IHZvdGUgdG8gYm9vbGVhblxyXG5cdFx0XHRcdC8vIHN0b3JlcyB0cnVlIHdoZW4gdXB2b3RlIGFuZCBmYWxzZSB3aGVuIGRvd252b3RlXHJcblx0XHRcdFx0Y29uc3Qgdm90ZUNvbmQgPSB2b3RlVHlwZSA9PT0gJ3VwJyA/IHRydWU6IGZhbHNlO1xyXG5cdFx0XHRcdFZvdGVcclxuXHRcdFx0XHRcdC5maW5kQWxsKHtcclxuXHRcdFx0XHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRcdFx0XHRyZWNpcGVJZFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnRoZW4gKHZvdGVzID0+IHsgXHJcblx0XHRcdFx0XHRcdC8vIGdldCBpZCBvZiB1c2VycyB0aGF0IGhhdmUgdm90ZWQgXHJcblx0XHRcdFx0XHRcdGNvbnN0IGFscmVhZHlWb3RlZCA9IHZvdGVzLm1hcCggdiA9PiB2LnVzZXJJZCk7XHJcblx0XHRcdFx0XHRcdC8vIGlmIGN1cnJlbnQgdXNlciBoYXMgdm90ZWQsIHJlbW92ZSB2b3RlICEgXHJcblx0XHRcdFx0XHRcdGlmICggYWxyZWFkeVZvdGVkLmluY2x1ZGVzKHVzZXJJZCkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgdXNlclZvdGUgPSB2b3Rlcy5maWx0ZXIodiA9PiB2LnVzZXJJZCA9IHVzZXJJZCApWzBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodXNlclZvdGUuZGF0YVZhbHVlcy52b3RlVHlwZSA9PT0gdm90ZUNvbmQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBWb3RlXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5maW5kQnlJZCh1c2VyVm90ZS5pZClcclxuXHRcdFx0XHRcdFx0XHRcdFx0LnRoZW4oIHZvdGUgPT4gdm90ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kZXN0cm95KClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQudGhlbiggKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1zZyA9IGAke3ZvdGVUeXBlfXZvdGUgcmVtb3ZlZCBzdWNjZXNzZnVsbHkhYFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmV4dCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdFx0XHR9IFxyXG5cdFx0XHRcdFx0XHRcdC8vIGVsc2UgY3JlYXRlIHRoZSB2b3RlLiBcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gVm90ZSBcclxuXHRcdFx0XHRcdFx0XHRcdC5maW5kQnlJZCh1c2VyVm90ZS5pZClcclxuXHRcdFx0XHRcdFx0XHRcdC50aGVuKCB2b3RlID0+IHZvdGUudXBkYXRlKHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dm90ZVR5cGU6IHZvdGVDb25kXHJcblx0XHRcdFx0XHRcdFx0XHR9KS50aGVuKCAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJlcy5tc2cgPSBgUmVjaXBlICR7dm90ZVR5cGV9dm90ZWQgc3VjY2Vzc2Z1bGx5IWA7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5leHQoKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIFZvdGVcclxuXHRcdFx0XHRcdFx0XHQuY3JlYXRlKHtyZWNpcGVJZCwgdXNlcklkLCB2b3RlVHlwZTogdm90ZUNvbmR9KVxyXG5cdFx0XHRcdFx0XHRcdC50aGVuKCAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXMubXNnID0gYFJlY2lwZSAke3ZvdGVUeXBlfXZvdGVkIHN1Y2Nlc3NmdWxseSFgO1xyXG5cdFx0XHRcdFx0XHRcdFx0bmV4dCgpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHQvLyAuY2F0Y2goIChlcnIpID0+IHJlcy5zdGF0dXMoNTAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyfSkpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG59O1xyXG5cclxuXHJcblxyXG4vLyBjb3VudCB2b3RlICEgXHJcbmV4cG9ydCBjb25zdCBjb3VudFZvdGUgPSAocmVxLCByZXMpID0+IHtcclxuXHRjb25zdCByZWNpcGVJZCA9IHBhcnNlSW50KHJlcS5wYXJhbXMucmVjaXBlSWQpO1xyXG5cclxuXHJcblx0Vm90ZVxyXG5cdFx0LmZpbmRBbGwoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHJlY2lwZUlkOiByZWNpcGVJZFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHZvdGVzID0+IHtcclxuXHRcdFx0Y29uc3QgdXB2b3RlQ291bnQgPSB2b3Rlcy5maWx0ZXIoIHZvdGUgPT4gdm90ZS52b3RlVHlwZSA9PT0gdHJ1ZSkubGVuZ3RoO1xyXG5cdFx0XHRjb25zdCBkb3dudm90ZUNvdW50ID0gdm90ZXMuZmlsdGVyKCB2b3RlID0+IHZvdGUudm90ZVR5cGUgPT09IGZhbHNlKS5sZW5ndGg7XHJcblxyXG5cdFx0XHRSZWNpcGVcclxuXHRcdFx0XHQuZmluZEJ5SWQocmVjaXBlSWQpXHJcblx0XHRcdFx0LnRoZW4oIHJlY2lwZSA9PiByZWNpcGUudXBkYXRlKHt1cHZvdGVDb3VudCxkb3dudm90ZUNvdW50fSlcclxuXHRcdFx0XHRcdC50aGVuKCByZWNpcGUgPT4ge1xyXG5cdFx0XHRcdFx0XHRyZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IHRydWUsXHJcblx0XHRcdFx0XHRcdFx0bWVzc2FnZTogcmVzLm1zZyxcclxuXHRcdFx0XHRcdFx0XHRyZWNpcGVcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHR9KVxyXG5cdFx0LmNhdGNoKCAoKSA9PiByZXMuc3RhdHVzKDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdjYW50IHZvdGUgcmVjaXBlJ30pKTtcclxufTtcclxuIl19