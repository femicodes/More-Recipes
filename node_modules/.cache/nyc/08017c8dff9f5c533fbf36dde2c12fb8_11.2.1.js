'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.checkRecipeExist = checkRecipeExist;
exports.checkUsernameExist = checkUsernameExist;
exports.checkUserExist = checkUserExist;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var User = _models2.default.User,
    Recipe = _models2.default.Recipe;
function checkRecipeExist(req, res, next) {
	var recipeId = req.params.recipeId ? parseInt(req.params.recipeId) : '';

	Recipe.findOne({
		where: {
			id: recipeId
		}
	}).then(function (recipe) {
		if (!recipe) return res.status(404).json({ success: false, message: 'Recipe does not exist' });else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'Invalid recipe id; id must be an number' });
	});
}

// check if username exist !
function checkUsernameExist(req, res, next) {

	var username = req.body.username && typeof req.body.username === 'string' ? req.body.username.trim() : '';
	if (!username) return res.status(400).json({ success: false, message: 'username and password are required' });

	User.findOne({
		where: {
			username: req.body.username
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'Username does not match any account' });
		} else next();
	});
}

// check if user id exists 
function checkUserExist(req, res, next) {
	User.findOne({
		where: {
			id: req.params.userId
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'User does not exist' });
		} else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'invalid user id; id must be an number' });
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlLmpzIl0sIm5hbWVzIjpbImNoZWNrUmVjaXBlRXhpc3QiLCJjaGVja1VzZXJuYW1lRXhpc3QiLCJjaGVja1VzZXJFeGlzdCIsIlVzZXIiLCJSZWNpcGUiLCJyZXEiLCJyZXMiLCJuZXh0IiwicmVjaXBlSWQiLCJwYXJhbXMiLCJwYXJzZUludCIsImZpbmRPbmUiLCJ3aGVyZSIsImlkIiwidGhlbiIsInJlY2lwZSIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsImNhdGNoIiwidXNlcm5hbWUiLCJib2R5IiwidHJpbSIsInVzZXIiLCJ1c2VySWQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBS2dCQSxnQixHQUFBQSxnQjtRQWtCQUMsa0IsR0FBQUEsa0I7UUFvQkFDLGMsR0FBQUEsYzs7QUEzQ2hCOzs7Ozs7SUFFT0MsSSxvQkFBQUEsSTtJQUFNQyxNLG9CQUFBQSxNO0FBR04sU0FBU0osZ0JBQVQsQ0FBMEJLLEdBQTFCLEVBQStCQyxHQUEvQixFQUFvQ0MsSUFBcEMsRUFBMEM7QUFDaEQsS0FBSUMsV0FBV0gsSUFBSUksTUFBSixDQUFXRCxRQUFYLEdBQXNCRSxTQUFTTCxJQUFJSSxNQUFKLENBQVdELFFBQXBCLENBQXRCLEdBQXNELEVBQXJFOztBQUVBSixRQUNFTyxPQURGLENBQ1U7QUFDUkMsU0FBTztBQUNOQyxPQUFJTDtBQURFO0FBREMsRUFEVixFQU1FTSxJQU5GLENBTVEsa0JBQVU7QUFDaEIsTUFBSSxDQUFDQyxNQUFMLEVBQWEsT0FBT1QsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyx1QkFBMUIsRUFBckIsQ0FBUCxDQUFiLEtBQ0taO0FBQ0wsRUFURixFQVVFYSxLQVZGLENBVVM7QUFBQSxTQUFNZCxJQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLHlDQUExQixFQUFyQixDQUFOO0FBQUEsRUFWVDtBQVlBOztBQUVEO0FBQ08sU0FBU2xCLGtCQUFULENBQTRCSSxHQUE1QixFQUFpQ0MsR0FBakMsRUFBc0NDLElBQXRDLEVBQTRDOztBQUVsRCxLQUFJYyxXQUFhaEIsSUFBSWlCLElBQUosQ0FBU0QsUUFBVCxJQUFxQixPQUFPaEIsSUFBSWlCLElBQUosQ0FBU0QsUUFBaEIsS0FBNkIsUUFBcEQsR0FBZ0VoQixJQUFJaUIsSUFBSixDQUFTRCxRQUFULENBQWtCRSxJQUFsQixFQUFoRSxHQUEwRixFQUF6RztBQUNBLEtBQUssQ0FBQ0YsUUFBTixFQUNDLE9BQU9mLElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVEsb0NBQXpCLEVBQXJCLENBQVA7O0FBRURoQixNQUNFUSxPQURGLENBQ1U7QUFDUkMsU0FBTztBQUNOUyxhQUFVaEIsSUFBSWlCLElBQUosQ0FBU0Q7QUFEYjtBQURDLEVBRFYsRUFNRVAsSUFORixDQU1RLGdCQUFRO0FBQ2QsTUFBSyxDQUFDVSxJQUFOLEVBQVk7QUFDWGxCLE9BQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMscUNBQTFCLEVBQXJCO0FBQ0EsR0FGRCxNQUVPWjtBQUNQLEVBVkY7QUFXQTs7QUFFRDtBQUNPLFNBQVNMLGNBQVQsQ0FBd0JHLEdBQXhCLEVBQTZCQyxHQUE3QixFQUFrQ0MsSUFBbEMsRUFBd0M7QUFDOUNKLE1BQ0VRLE9BREYsQ0FDVTtBQUNSQyxTQUFPO0FBQ05DLE9BQUlSLElBQUlJLE1BQUosQ0FBV2dCO0FBRFQ7QUFEQyxFQURWLEVBTUVYLElBTkYsQ0FNUSxnQkFBUTtBQUNkLE1BQUksQ0FBQ1UsSUFBTCxFQUFVO0FBQ1RsQixPQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLHFCQUExQixFQUFyQjtBQUNBLEdBRkQsTUFFT1o7QUFDUCxFQVZGLEVBV0VhLEtBWEYsQ0FXUztBQUFBLFNBQU1kLElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsdUNBQTFCLEVBQXJCLENBQU47QUFBQSxFQVhUO0FBWUEiLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvVG9iaS9Nb3JlLVJlY2lwZXMvc2VydmVyL21pZGRsZXdhcmUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGIgZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNvbnN0IHtVc2VyLCBSZWNpcGV9ID0gZGI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVjaXBlRXhpc3QocmVxLCByZXMsIG5leHQpIHtcclxuXHRsZXQgcmVjaXBlSWQgPSByZXEucGFyYW1zLnJlY2lwZUlkID8gcGFyc2VJbnQocmVxLnBhcmFtcy5yZWNpcGVJZCkgOiAnJztcclxuXHRcclxuXHRSZWNpcGUgXHJcblx0XHQuZmluZE9uZSh7XHJcblx0XHRcdHdoZXJlOiB7XHJcblx0XHRcdFx0aWQ6IHJlY2lwZUlkXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHQudGhlbiggcmVjaXBlID0+IHtcclxuXHRcdFx0aWYgKCFyZWNpcGUpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdSZWNpcGUgZG9lcyBub3QgZXhpc3QnfSk7XHJcblx0XHRcdGVsc2UgbmV4dCgpO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnSW52YWxpZCByZWNpcGUgaWQ7IGlkIG11c3QgYmUgYW4gbnVtYmVyJ30pKTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHVzZXJuYW1lIGV4aXN0ICFcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXNlcm5hbWVFeGlzdChyZXEsIHJlcywgbmV4dCkge1xyXG5cclxuXHRsZXQgdXNlcm5hbWUgPSAoIHJlcS5ib2R5LnVzZXJuYW1lICYmIHR5cGVvZiByZXEuYm9keS51c2VybmFtZSA9PT0gJ3N0cmluZycgKT8gcmVxLmJvZHkudXNlcm5hbWUudHJpbSgpOiAnJztcclxuXHRpZiAoICF1c2VybmFtZSApIFxyXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTondXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCd9KTtcclxuXHJcblx0VXNlclxyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHVzZXJuYW1lOiByZXEuYm9keS51c2VybmFtZVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHVzZXIgPT4ge1xyXG5cdFx0XHRpZiAoICF1c2VyICl7XHJcblx0XHRcdFx0cmVzLnN0YXR1cyg0MDQpLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnVXNlcm5hbWUgZG9lcyBub3QgbWF0Y2ggYW55IGFjY291bnQnfSk7XHJcblx0XHRcdH0gZWxzZSBuZXh0KCk7XHJcblx0XHR9KTtcclxufVxyXG5cdFxyXG4vLyBjaGVjayBpZiB1c2VyIGlkIGV4aXN0cyBcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXNlckV4aXN0KHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0VXNlciBcclxuXHRcdC5maW5kT25lKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRpZDogcmVxLnBhcmFtcy51c2VySWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCB1c2VyID0+IHtcclxuXHRcdFx0aWYgKCF1c2VyKXtcclxuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdVc2VyIGRvZXMgbm90IGV4aXN0J30pO1xyXG5cdFx0XHR9IGVsc2UgbmV4dCgpO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnaW52YWxpZCB1c2VyIGlkOyBpZCBtdXN0IGJlIGFuIG51bWJlcid9KSk7XHJcbn0iXX0=