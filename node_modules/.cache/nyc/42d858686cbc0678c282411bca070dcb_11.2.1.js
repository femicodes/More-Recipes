'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.deleteRecipe = exports.modifyRecipe = exports.createRecipe = exports.getRecipes = exports.getRecipe = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Recipe = _models2.default.Recipe;
// const {Review, User} = db;

// returns all recipes ! 
// GET ---> recipes

var getRecipe = exports.getRecipe = function getRecipe(req, res) {
	var recipeId = parseInt(req.params.recipeId);
	// console.log(recipeId);
	return Recipe.findById(recipeId).then(function (recipe) {
		if (recipe) res.status(200).json(recipe);else res.status(200).json({ success: true, message: 'recipe does not exist' });
	}).catch(function (err) {
		return res.status(404).json({
			success: false,
			message: err.errors[0].message
		});
	});
};

// query ---> start=10, end=20; sort=upvotes&order=ascending
var getRecipes = exports.getRecipes = function getRecipes(req, res) {
	// console.log(req.query.sort, req.query.order);
	var _req$query = req.query,
	    sort = _req$query.sort,
	    order = _req$query.order;


	if (sort && order) {

		// if sort and order exist convert them to lowercase ! 
		sort = sort.toLowerCase();
		order = order.toLowerCase();

		if (sort !== 'upvotes' && sort !== 'downvotes') return res.status(400).json({ success: false, message: 'Cannot sort recipes by ' + sort });

		if (order !== 'ascending' && order !== 'descending') return res.status(400).send({ success: false, message: 'Invalid order, Please use either ascending or descending' });

		var orderCriteria = order === 'ascending' ? 'ASC' : 'DESC';
		var sortCriteria = sort === 'upvotes' ? 'upvoteCount' : 'downvoteCount';

		// else if the order and sort is okay. ! 
		return Recipe.findAll({
			attributes: ['id', 'title', 'description', 'ingredient', 'direction', 'upvoteCount', 'downvoteCount'],
			order: [[sortCriteria, orderCriteria]]
			// include: [
			// 	{ model: Review, as: 'reviews', attributes: ['id', 'body'] },
			// 	{ model: User, attributes: ['id', 'username', 'fullname'] }
			// ]
		}).then(function (recipes) {
			return res.status(200).send({ success: true, recipes: recipes });
		}).catch(function () {
			return res.status(500).send({ success: false, message: 'cant get recipes' });
		});
	}

	// if no query at all, just return all the recipes 
	return Recipe.findAll({
		attributes: ['id', 'title', 'description', 'ingredient', 'direction', 'upvoteCount', 'downvoteCount'],
		order: [['upvoteCount', 'DESC']]
		// include: [
		// 	{ model: Review, as: 'reviews', attributes: ['id', 'body'] },
		// 	{ model: User, attributes: ['id', 'username', 'fullname'] }
		// ]
	}).then(function (recipes) {
		return res.status(200).send({ success: true, recipes: recipes });
	}).catch(function (err) {
		return res.status(404).json({
			success: false,
			message: err.errors[0].message
		});
	});
};

// create a recipe 
var createRecipe = exports.createRecipe = function createRecipe(req, res) {
	var userId = req.userId;
	// const {title, description, ingredient, direction} = req.body;

	var title = req.body.title ? req.body.title.trim() : '';
	var description = req.body.description ? req.body.description.trim() : '';
	var ingredient = req.body.ingredient ? req.body.ingredient.trim() : '';
	var direction = req.body.direction ? req.body.direction.trim() : '';

	// console.log(userId)
	return Recipe.create({
		userId: userId,
		title: title,
		description: description,
		ingredient: ingredient,
		direction: direction
	}).then(function (recipe) {
		return res.status(201).json({ message: 'recipe created successfully', recipe: recipe });
	}).catch(function (err) {
		return res.status(500).json({ success: false, message: err.errors[0].message });
	});
};

// modify a recipe
var modifyRecipe = exports.modifyRecipe = function modifyRecipe(req, res) {
	var userId = req.userId;
	var recipeId = req.params.recipeId;


	return Recipe.findById(recipeId).then(function (recipe) {
		if (recipe.userId !== userId) {
			res.status(403).json({ success: false, message: 'Not authorized to delete this recipe!' });
		}
		return recipe.update({
			title: recipe.body.title || recipe.title,
			description: recipe.body.description || recipe.description,
			ingredient: recipe.body.ingredient || recipe.ingredient,
			direction: recipe.body.direction || recipe.direction
		}).then(function (recipe) {
			return res.status(200).json({ message: 'recipe updated successfully', recipe: recipe });
		}).catch(function () {
			return res.status(400).json({ success: false, message: 'Error modifying recipe' });
		});
	}).catch(function () {
		return res.status(500).json({
			success: false,
			message: 'Error modifying recipe'
		});
	});
};

var deleteRecipe = exports.deleteRecipe = function deleteRecipe(req, res) {
	var userId = req.userId;
	// console.log(userId);

	Recipe.findById(req.params.recipeId).then(function (recipe) {
		if (recipe.userId !== userId) {
			return res.status(404).json({ success: false, message: 'Not authorized to delete this recipe' });
		}
		recipe.destroy().then(function () {
			return res.status(200).json({ sucess: true, message: 'Recipe deleted successfully' });
		}).catch(function () {
			return res.status(400).json({ success: false, message: 'Recipe cannot be deleted' });
		});
	}).catch(function (err) {
		return res.status(500).json({
			success: false,
			message: err.errors[0].message
		});
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,