'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getUserRecipes = exports.loginUser = exports.createUser = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

var _bcryptjs = require('bcryptjs');

var _bcryptjs2 = _interopRequireDefault(_bcryptjs);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var User = _models2.default.User,
    Recipe = _models2.default.Recipe;

// Create users.

var createUser = exports.createUser = function createUser(req, res) {

	var username = req.body.username ? req.body.username.trim() : '';
	var email = req.body.email ? req.body.email.trim() : '';
	var password = req.body.password ? req.body.password.trim() : '';

	var EMAIL_REGEXP = /^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/;
	var USERNAME_REGEXP = /^(\w){3,15}$/;

	var err_msg = void 0;
	if (username === '') {
		err_msg = 'Username is required';
	} else if (email === '') {
		err_msg = 'Email is required';
	} else if (!USERNAME_REGEXP.test(username)) {
		err_msg = 'Username must be atleast 3 characters long and alphanumeric';
	} else if (email.length <= 4 || email.length > 30 || !EMAIL_REGEXP.test(email)) {
		err_msg = 'invalid email address';
	} else if (password === '') {
		err_msg = 'Password is required';
	} else if (password.length < 6) {
		err_msg = 'Password must be atleast 6 characters long!';
	}

	if (err_msg) return res.status(422).json({ success: false, message: err_msg });

	return User.create({
		username: username,
		email: email,
		password: _bcryptjs2.default.hashSync(password, 10),
		fullname: req.body.fullname
	}).then(function (user) {
		var token = _jsonwebtoken2.default.sign({ user: user }, process.env.SECRET_KEY, { expiresIn: '120m' });
		res.status(201).json({
			success: true,
			message: 'Account created successfully',
			id: user.id,
			username: user.username,
			email: user.email,
			token: token
		});
	}).catch(function (err) {
		return res.status(400).json({
			success: false,
			message: err //.errors[0].message
		});
	});
};

//The username and password you entered did not match our records. Please double-check and try again.

// Sign in users
var loginUser = exports.loginUser = function loginUser(req, res) {
	var username = req.body.username ? req.body.username.trim() : '';
	var password = req.body.password;

	if (!(username && password)) return res.status(400).json({ success: false, message: 'username and password are required' });

	return User.findOne({
		where: {
			username: req.body.username
		}
	}).then(function (user) {
		var token = _jsonwebtoken2.default.sign({ user: user }, process.env.SECRET_KEY, { expiresIn: '120m' });
		_bcryptjs2.default.compare(password, user.password).then(function (check) {
			if (check) {
				// console.log(req.userId); 
				res.status(200).json({
					success: true,
					message: 'Logged in Successfully!',
					token: token
				});
			} else res.status(401).json({
				success: false,
				message: 'Wrong username and password!'
			});
		}).catch(function (err) {
			return res.status(400).json({
				success: false,
				message: err.errors[0].message });
		});
	});
};

var getUserRecipes = exports.getUserRecipes = function getUserRecipes(req, res) {
	var userId = req.params.userId;
	// console.log(userId);

	Recipe.findAll({
		where: {
			userId: userId
		}
	}).then(function (recipes) {
		var recipesCount = recipes.length;
		// console.log(favorites);
		if (recipesCount == 0) {
			return res.status(200).json({
				success: true,
				message: 'User has no recipes posted'
			});
		}
		return res.status(200).json({ success: true, message: recipesCount + ' recipes posted', recipes: recipes });
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'An error occured! ' });
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,