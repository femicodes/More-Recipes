'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getUserFavorites = exports.favoriteRecipe = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Recipe = _models2.default.Recipe,
    Favorite = _models2.default.Favorite;

// favourite a recipe
// POST ---> api/recipes/:recipeId/favorite

var favoriteRecipe = exports.favoriteRecipe = function favoriteRecipe(req, res) {
	var recipeId = req.params.recipeId;
	var userId = req.userId;


	Favorite.findOne({
		where: {
			recipeId: recipeId, userId: userId
		}
	}).then(function (favorite) {
		if (favorite) {
			return favorite.destroy().then(res.status(200).json({ success: true, message: 'Recipe have been removed from favorites!' }));
		}
		return Favorite.create({
			userId: userId,
			recipeId: recipeId
		}).then(function () {
			return res.status(200).json({ success: true, message: 'Recipe have been added to favorites!' });
		}).catch(function () {
			return res.status(500).json({ success: false, message: 'An error occured' });
		});
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'An error occured !' });
	});
};

// get user favourite
// GET ---> api/users/:userId/favourites
var getUserFavorites = exports.getUserFavorites = function getUserFavorites(req, res) {
	var userId = req.params.userId;


	Favorite.findAll({
		where: {
			userId: userId
		},
		include: [{
			model: Recipe
		}]
	}).then(function (favorites) {
		var favoritesCount = favorites.length;
		if (favoritesCount == 0) {
			return res.status(200).json({
				success: true,
				message: 'User has no recipe in favorites'
			});
		}
		var recipes = favorites.map(function (fav) {
			return fav.Recipe;
		});
		return res.status(200).json({ success: true, message: favoritesCount + ' recipes found in favorite', recipes: recipes });
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'An error occured! ' });
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhdm9yaXRlLmpzIl0sIm5hbWVzIjpbIlJlY2lwZSIsIkZhdm9yaXRlIiwiZmF2b3JpdGVSZWNpcGUiLCJyZXEiLCJyZXMiLCJyZWNpcGVJZCIsInBhcmFtcyIsInVzZXJJZCIsImZpbmRPbmUiLCJ3aGVyZSIsInRoZW4iLCJmYXZvcml0ZSIsImRlc3Ryb3kiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJjcmVhdGUiLCJjYXRjaCIsImdldFVzZXJGYXZvcml0ZXMiLCJmaW5kQWxsIiwiaW5jbHVkZSIsIm1vZGVsIiwiZmF2b3JpdGVzQ291bnQiLCJmYXZvcml0ZXMiLCJsZW5ndGgiLCJyZWNpcGVzIiwibWFwIiwiZmF2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztJQUVRQSxNLG9CQUFBQSxNO0lBQVFDLFEsb0JBQUFBLFE7O0FBR2hCO0FBQ0E7O0FBQ08sSUFBTUMsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBQ25DQyxRQURtQyxHQUN0QkYsSUFBSUcsTUFEa0IsQ0FDbkNELFFBRG1DO0FBQUEsS0FFbkNFLE1BRm1DLEdBRXhCSixHQUZ3QixDQUVuQ0ksTUFGbUM7OztBQUkzQ04sVUFDRU8sT0FERixDQUNVO0FBQ1JDLFNBQU87QUFDTkoscUJBRE0sRUFDSUU7QUFESjtBQURDLEVBRFYsRUFNRUcsSUFORixDQU1RLG9CQUFZO0FBQ2xCLE1BQUlDLFFBQUosRUFBYztBQUNiLFVBQU9BLFNBQ0xDLE9BREssR0FFTEYsSUFGSyxDQUVBTixJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxJQUFWLEVBQWdCQyxTQUFTLDBDQUF6QixFQUFyQixDQUZBLENBQVA7QUFHQTtBQUNELFNBQU9mLFNBQ0xnQixNQURLLENBQ0U7QUFDUFYsaUJBRE87QUFFUEY7QUFGTyxHQURGLEVBS0xLLElBTEssQ0FLQztBQUFBLFVBQU1OLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLElBQVYsRUFBZ0JDLFNBQVMsc0NBQXpCLEVBQXJCLENBQU47QUFBQSxHQUxELEVBTUxFLEtBTkssQ0FNRTtBQUFBLFVBQU1kLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsa0JBQTFCLEVBQXJCLENBQU47QUFBQSxHQU5GLENBQVA7QUFRQSxFQXBCRixFQXFCRUUsS0FyQkYsQ0FxQlM7QUFBQSxTQUFNZCxJQUFJUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLG9CQUExQixFQUFyQixDQUFOO0FBQUEsRUFyQlQ7QUF1QkEsQ0EzQk07O0FBNkJQO0FBQ0E7QUFDTyxJQUFNRyw4Q0FBbUIsU0FBbkJBLGdCQUFtQixDQUFDaEIsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFBQSxLQUVyQ0csTUFGcUMsR0FFMUJKLElBQUlHLE1BRnNCLENBRXJDQyxNQUZxQzs7O0FBSTdDTixVQUNFbUIsT0FERixDQUNVO0FBQ1JYLFNBQU87QUFDTkY7QUFETSxHQURDO0FBSVJjLFdBQVMsQ0FBQztBQUNUQyxVQUFPdEI7QUFERSxHQUFEO0FBSkQsRUFEVixFQVNFVSxJQVRGLENBU1EscUJBQWE7QUFDbkIsTUFBTWEsaUJBQWtCQyxVQUFVQyxNQUFsQztBQUNBLE1BQUtGLGtCQUFrQixDQUF2QixFQUEyQjtBQUMxQixVQUFPbkIsSUFBSVMsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzNCQyxhQUFTLElBRGtCO0FBRTNCQyxhQUFTO0FBRmtCLElBQXJCLENBQVA7QUFJQTtBQUNELE1BQU1VLFVBQVVGLFVBQVVHLEdBQVYsQ0FBZTtBQUFBLFVBQU9DLElBQUk1QixNQUFYO0FBQUEsR0FBZixDQUFoQjtBQUNBLFNBQU9JLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLElBQVYsRUFBZ0JDLFNBQVlPLGNBQVosK0JBQWhCLEVBQXdFRyxnQkFBeEUsRUFBckIsQ0FBUDtBQUNBLEVBbkJGLEVBb0JFUixLQXBCRixDQW9CUztBQUFBLFNBQU1kLElBQUlTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsb0JBQTFCLEVBQXJCLENBQU47QUFBQSxFQXBCVDtBQXFCQSxDQXpCTSIsImZpbGUiOiJmYXZvcml0ZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Ub2JpL01vcmUtUmVjaXBlcy9zZXJ2ZXIvY29udHJvbGxlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYiBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY29uc3QgeyBSZWNpcGUsIEZhdm9yaXRlIH0gPSBkYjtcclxuXHJcblxyXG4vLyBmYXZvdXJpdGUgYSByZWNpcGVcclxuLy8gUE9TVCAtLS0+IGFwaS9yZWNpcGVzLzpyZWNpcGVJZC9mYXZvcml0ZVxyXG5leHBvcnQgY29uc3QgZmF2b3JpdGVSZWNpcGUgPSAocmVxLCByZXMpID0+IHtcclxuXHRjb25zdCB7IHJlY2lwZUlkIH0gPSByZXEucGFyYW1zO1xyXG5cdGNvbnN0IHsgdXNlcklkIH0gPSByZXE7XHJcblxyXG5cdEZhdm9yaXRlXHJcblx0XHQuZmluZE9uZSh7XHJcblx0XHRcdHdoZXJlOiB7XHJcblx0XHRcdFx0cmVjaXBlSWQsIHVzZXJJZFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIGZhdm9yaXRlID0+IHtcclxuXHRcdFx0aWYgKGZhdm9yaXRlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhdm9yaXRlXHJcblx0XHRcdFx0XHQuZGVzdHJveSgpICBcclxuXHRcdFx0XHRcdC50aGVuKHJlcy5zdGF0dXMoMjAwKS5qc29uKHtzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnUmVjaXBlIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gZmF2b3JpdGVzISd9KSk7XHJcblx0XHRcdH0gXHJcblx0XHRcdHJldHVybiBGYXZvcml0ZVxyXG5cdFx0XHRcdC5jcmVhdGUoe1xyXG5cdFx0XHRcdFx0dXNlcklkLCBcclxuXHRcdFx0XHRcdHJlY2lwZUlkXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQudGhlbiggKCkgPT4gcmVzLnN0YXR1cygyMDApLmpzb24oe3N1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdSZWNpcGUgaGF2ZSBiZWVuIGFkZGVkIHRvIGZhdm9yaXRlcyEnfSkpXHJcblx0XHRcdFx0LmNhdGNoKCAoKSA9PiByZXMuc3RhdHVzKDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cmVkJ30pKTtcclxuXHRcdFx0XHJcblx0XHR9KVxyXG5cdFx0LmNhdGNoKCAoKSA9PiByZXMuc3RhdHVzKDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiBlcnJvciBvY2N1cmVkICEnfSkpO1xyXG5cclxufTtcclxuXHJcbi8vIGdldCB1c2VyIGZhdm91cml0ZVxyXG4vLyBHRVQgLS0tPiBhcGkvdXNlcnMvOnVzZXJJZC9mYXZvdXJpdGVzXHJcbmV4cG9ydCBjb25zdCBnZXRVc2VyRmF2b3JpdGVzID0gKHJlcSwgcmVzKSA9PiB7XHJcblxyXG5cdGNvbnN0IHsgdXNlcklkIH0gPSByZXEucGFyYW1zO1xyXG5cclxuXHRGYXZvcml0ZSBcclxuXHRcdC5maW5kQWxsKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHR1c2VySWRcclxuXHRcdFx0fSxcclxuXHRcdFx0aW5jbHVkZTogW3tcclxuXHRcdFx0XHRtb2RlbDogUmVjaXBlXHJcblx0XHRcdH1dXHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIGZhdm9yaXRlcyA9PiB7XHJcblx0XHRcdGNvbnN0IGZhdm9yaXRlc0NvdW50ID0gIGZhdm9yaXRlcy5sZW5ndGg7XHJcblx0XHRcdGlmICggZmF2b3JpdGVzQ291bnQgPT0gMCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG5cdFx0XHRcdFx0c3VjY2VzczogdHJ1ZSxcclxuXHRcdFx0XHRcdG1lc3NhZ2U6ICdVc2VyIGhhcyBubyByZWNpcGUgaW4gZmF2b3JpdGVzJyxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCByZWNpcGVzID0gZmF2b3JpdGVzLm1hcCggZmF2ID0+IGZhdi5SZWNpcGUpO1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe3N1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IGAke2Zhdm9yaXRlc0NvdW50fSByZWNpcGVzIGZvdW5kIGluIGZhdm9yaXRlYCwgcmVjaXBlc30pOyBcclxuXHRcdH0pXHJcblx0XHQuY2F0Y2goICgpID0+IHJlcy5zdGF0dXMoNTAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0FuIGVycm9yIG9jY3VyZWQhICd9KSk7XHJcbn07Il19