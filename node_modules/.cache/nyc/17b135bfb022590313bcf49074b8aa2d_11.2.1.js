'use strict';

var _chai = require('chai');

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = 'test';

var rootURL = '/api/v1';
var recipesUrl = rootURL + '/recipes';
var usersUrl = rootURL + '/users';

var data = {};
var request = (0, _supertest2.default)(_app2.default);

describe('API Integration Tests', function () {
	it('Should return home page', function (done) {
		// calling home page api
		request.get('/api/v1/').end(function (err, res) {
			// console.log(res);
			(0, _chai.expect)(res.status).to.equal(200);
			(0, _chai.expect)(res.body.message).to.equal('Welcome to More Recipes');
			(0, _chai.expect)(res.body.success).to.equal(true);
			done();
		});
	});

	describe('User signup', function () {
		var signupURl = rootURL + '/users/signup';

		beforeEach(function () {
			data = {
				username: 'user1',
				password: 'password',
				email: 'example@user.com'
			};
		});

		it('return 201 for a successful account creation', function (done) {

			request.post(signupURl).send(data).end(function (err, res) {
				// console.log(res);
				(0, _chai.expect)(res.status).to.equal(201);
				(0, _chai.expect)(res.body.success).to.equal(true);
				(0, _chai.expect)(res.body.message).to.equal('Account created successfully');
				done();
			});
		});

		it('return 400 for an already existing email ', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.username = 'user2';
			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(400);
				(0, _chai.expect)(res.body.success).to.equal(false);
				(0, _chai.expect)(res.body.message).to.equal('Email is already taken, please enter another');
				done();
			});
		});

		it('return 422 for an empty username ', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.username = ' ';

			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(422);
				(0, _chai.expect)(res.body.message).to.equal('Username is required');
				done();
			});
		});

		it('return 422 for an empty email ', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.email = '  ';

			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(422);
				(0, _chai.expect)(res.body.message).to.equal('Email is required');
				done();
			});
		});

		it('return 422 for an empty password', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.password = ' ';

			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(422);
				(0, _chai.expect)(res.body.message).to.equal('Password is required');
				done();
			});
		});

		it('return 422 for an invalid email', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.email = 'invalidemail';

			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(422);
				(0, _chai.expect)(res.body.message).to.equal('invalid email address');
				done();
			});
		});

		it('return 422 for a password less than 6 characters', function (done) {
			var invalidData = Object.assign({}, data);
			invalidData.password = 'pass';

			request.post(signupURl).send(invalidData).end(function (err, res) {
				(0, _chai.expect)(res.status).to.equal(422);
				(0, _chai.expect)(res.body.message).to.equal('Password must be atleast 6 characters long!');
				done();
			});
		});
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,