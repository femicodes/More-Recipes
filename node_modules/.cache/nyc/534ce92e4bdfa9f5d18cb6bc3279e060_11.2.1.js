'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.countVote = exports.voteRecipe = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Vote = _models2.default.Vote,
    Recipe = _models2.default.Recipe;

// upvote a recipe
// POST --> users/upvote/:recipeId

var voteRecipe = exports.voteRecipe = function voteRecipe(req, res, next) {
	var recipeId = parseInt(req.params.recipeId);

	var voteType = req.params.voteType;
	var userId = req.userId;


	if (voteType !== 'down' && voteType !== 'up') return res.status(400).send({
		success: false,
		message: 'invalid vote type'
	});

	Recipe.findById(recipeId).then(function (recipe) {
		if (recipe.userId === userId) return res.status(200).json({ success: false, message: 'Cant vote on own recipe' });
	});

	// store upvotes as true and downvote as false --> basically convert vote to boolean
	// stores true when upvote and false when downvote
	var voteCond = voteType === 'up' ? true : false;
	Vote.findAll({
		where: {
			recipeId: recipeId
		}
	}).then(function (votes) {

		var alreadyVoted = votes.map(function (v) {
			return v.userId;
		});
		if (alreadyVoted.includes(userId)) {

			var userVote = votes.filter(function (v) {
				return v.userId = userId;
			})[0];
			// console.log(userVote);
			// console.log(`User vote type -----> ${typeof userVote.dataValues.voteType}`);

			// console.log(userVote.dataValues.VoteType === voteCond);

			if (userVote.dataValues.voteType === voteCond) {
				return Vote.findById(userVote.id).then(function (vote) {
					return vote.destroy().then(function () {

						next();
					});
				});
				// .catch( () => res.status(500).json({success: false, message: 'Error'})));
			}

			return Vote.findById(userVote.id).then(function (vote) {
				return vote.update({
					voteType: voteCond
				}).then(function () {
					// res.status(200).json({success: true, message:`${voteType}vote have been recorded successfully`});
					next();
				});
			});
		}
		// .catch();

		return Vote.create({ recipeId: recipeId, userId: userId, voteType: voteCond }).then(function () {
			// res.status(200).json({success: true, message: `${voteType}vote has been recorded successfully`});
			next();
		});
		// .catch( (err) => res.status(500).json({success: false, message: err}));
	});
	// .catch( () =>  res.status(500).json({success: false, message: 'cannot vote recipe'}));
};

// count vote ! 
var countVote = exports.countVote = function countVote(req, res) {
	var recipeId = parseInt(req.params.recipeId);
	// console.log(recipeId);

	Vote.findAll({
		where: {
			recipeId: recipeId
		}
	}).then(function (votes) {
		// console.log(votes);
		var upvoteCount = votes.filter(function (vote) {
			return vote.voteType === true;
		}).length;
		var downvoteCount = votes.filter(function (vote) {
			return vote.voteType === false;
		}).length;
		// console.log(upvoteCount, downvoteCount);

		Recipe.findById(recipeId).then(function (recipe) {
			return recipe.update({ upvoteCount: upvoteCount, downvoteCount: downvoteCount }).then(function (updatedRecipe) {
				res.status(200).json({ success: true,
					updatedRecipe: updatedRecipe
				});
			});
		});
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'cant vote recipe' });
	});

	// return { upvoteCount, downvoteCount };
	// .catch( (err) => res.status(500).json({success: false, message: err}));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,