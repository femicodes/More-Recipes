'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.checkRecipeExist = checkRecipeExist;
exports.checkUsernameExist = checkUsernameExist;
exports.checkUserExist = checkUserExist;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var User = _models2.default.User,
    Recipe = _models2.default.Recipe;
function checkRecipeExist(req, res, next) {
	// console.log(typeof req.params.recipeId);

	var recipeId = req.params.recipeId ? parseInt(req.params.recipeId) : '';
	// console.log(recipeId);
	Recipe.findOne({
		where: {
			id: recipeId
		}
	}).then(function (recipe) {
		if (!recipe) return res.status(404).json({ success: false, message: 'Recipe does not exist' });else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'Invalid recipe id' });
	});
}

// check if username exist !
function checkUsernameExist(req, res, next) {
	console.log(req.body.username);
	var username = req.body.username ? req.body.username.trim() : '';
	if (!username) return res.status(400).json({ success: false, message: 'username and password are required' });

	User.findOne({
		where: {
			username: req.body.username
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'Username does not match any account' });
		} else next();
	});
}

// check if user id exists 
function checkUserExist(req, res, next) {
	User.findOne({
		where: {
			id: req.params.userId
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'User does not exist' });
		} else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'invalid user id; id must be an integer' });
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlLmpzIl0sIm5hbWVzIjpbImNoZWNrUmVjaXBlRXhpc3QiLCJjaGVja1VzZXJuYW1lRXhpc3QiLCJjaGVja1VzZXJFeGlzdCIsIlVzZXIiLCJSZWNpcGUiLCJyZXEiLCJyZXMiLCJuZXh0IiwicmVjaXBlSWQiLCJwYXJhbXMiLCJwYXJzZUludCIsImZpbmRPbmUiLCJ3aGVyZSIsImlkIiwidGhlbiIsInJlY2lwZSIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsImNhdGNoIiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJ1c2VybmFtZSIsInRyaW0iLCJ1c2VyIiwidXNlcklkIl0sIm1hcHBpbmdzIjoiOzs7OztRQUtnQkEsZ0IsR0FBQUEsZ0I7UUFvQkFDLGtCLEdBQUFBLGtCO1FBb0JBQyxjLEdBQUFBLGM7O0FBN0NoQjs7Ozs7O0lBRU9DLEksb0JBQUFBLEk7SUFBTUMsTSxvQkFBQUEsTTtBQUdOLFNBQVNKLGdCQUFULENBQTBCSyxHQUExQixFQUErQkMsR0FBL0IsRUFBb0NDLElBQXBDLEVBQTBDO0FBQ2hEOztBQUVBLEtBQUlDLFdBQVdILElBQUlJLE1BQUosQ0FBV0QsUUFBWCxHQUFzQkUsU0FBU0wsSUFBSUksTUFBSixDQUFXRCxRQUFwQixDQUF0QixHQUFzRCxFQUFyRTtBQUNBO0FBQ0FKLFFBQ0VPLE9BREYsQ0FDVTtBQUNSQyxTQUFPO0FBQ05DLE9BQUlMO0FBREU7QUFEQyxFQURWLEVBTUVNLElBTkYsQ0FNUSxrQkFBVTtBQUNoQixNQUFJLENBQUNDLE1BQUwsRUFBYSxPQUFPVCxJQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLHVCQUExQixFQUFyQixDQUFQLENBQWIsS0FDS1o7QUFDTCxFQVRGLEVBVUVhLEtBVkYsQ0FVUztBQUFBLFNBQU1kLElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsbUJBQTFCLEVBQXJCLENBQU47QUFBQSxFQVZUO0FBWUE7O0FBRUQ7QUFDTyxTQUFTbEIsa0JBQVQsQ0FBNEJJLEdBQTVCLEVBQWlDQyxHQUFqQyxFQUFzQ0MsSUFBdEMsRUFBNEM7QUFDbERjLFNBQVFDLEdBQVIsQ0FBWWpCLElBQUlrQixJQUFKLENBQVNDLFFBQXJCO0FBQ0EsS0FBSUEsV0FBV25CLElBQUlrQixJQUFKLENBQVNDLFFBQVQsR0FBbUJuQixJQUFJa0IsSUFBSixDQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUFuQixHQUE2QyxFQUE1RDtBQUNBLEtBQUssQ0FBQ0QsUUFBTixFQUNDLE9BQU9sQixJQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFRLG9DQUF6QixFQUFyQixDQUFQOztBQUVEaEIsTUFDRVEsT0FERixDQUNVO0FBQ1JDLFNBQU87QUFDTlksYUFBVW5CLElBQUlrQixJQUFKLENBQVNDO0FBRGI7QUFEQyxFQURWLEVBTUVWLElBTkYsQ0FNUSxnQkFBUTtBQUNkLE1BQUssQ0FBQ1ksSUFBTixFQUFZO0FBQ1hwQixPQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLHFDQUExQixFQUFyQjtBQUNBLEdBRkQsTUFFT1o7QUFDUCxFQVZGO0FBV0E7O0FBRUQ7QUFDTyxTQUFTTCxjQUFULENBQXdCRyxHQUF4QixFQUE2QkMsR0FBN0IsRUFBa0NDLElBQWxDLEVBQXdDO0FBQzlDSixNQUNFUSxPQURGLENBQ1U7QUFDUkMsU0FBTztBQUNOQyxPQUFJUixJQUFJSSxNQUFKLENBQVdrQjtBQURUO0FBREMsRUFEVixFQU1FYixJQU5GLENBTVEsZ0JBQVE7QUFDZCxNQUFJLENBQUNZLElBQUwsRUFBVTtBQUNUcEIsT0FBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxxQkFBMUIsRUFBckI7QUFDQSxHQUZELE1BRU9aO0FBQ1AsRUFWRixFQVdFYSxLQVhGLENBV1M7QUFBQSxTQUFNZCxJQUFJVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLHdDQUExQixFQUFyQixDQUFOO0FBQUEsRUFYVDtBQVlBIiwiZmlsZSI6InZhbGlkYXRlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1RvYmkvTW9yZS1SZWNpcGVzL3NlcnZlci9taWRkbGV3YXJlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRiIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCB7VXNlciwgUmVjaXBlfSA9IGRiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JlY2lwZUV4aXN0KHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0Ly8gY29uc29sZS5sb2codHlwZW9mIHJlcS5wYXJhbXMucmVjaXBlSWQpO1xyXG5cclxuXHRsZXQgcmVjaXBlSWQgPSByZXEucGFyYW1zLnJlY2lwZUlkID8gcGFyc2VJbnQocmVxLnBhcmFtcy5yZWNpcGVJZCkgOiAnJztcclxuXHQvLyBjb25zb2xlLmxvZyhyZWNpcGVJZCk7XHJcblx0UmVjaXBlIFxyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdGlkOiByZWNpcGVJZFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHJlY2lwZSA9PiB7XHJcblx0XHRcdGlmICghcmVjaXBlKSByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnUmVjaXBlIGRvZXMgbm90IGV4aXN0J30pO1xyXG5cdFx0XHRlbHNlIG5leHQoKTtcclxuXHRcdH0pXHJcblx0XHQuY2F0Y2goICgpID0+IHJlcy5zdGF0dXMoNTAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0ludmFsaWQgcmVjaXBlIGlkJ30pKTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHVzZXJuYW1lIGV4aXN0ICFcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXNlcm5hbWVFeGlzdChyZXEsIHJlcywgbmV4dCkge1xyXG5cdGNvbnNvbGUubG9nKHJlcS5ib2R5LnVzZXJuYW1lKTtcclxuXHRsZXQgdXNlcm5hbWUgPSByZXEuYm9keS51c2VybmFtZT8gcmVxLmJvZHkudXNlcm5hbWUudHJpbSgpOiAnJztcclxuXHRpZiAoICF1c2VybmFtZSApIFxyXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTondXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCd9KTtcclxuXHJcblx0VXNlclxyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHVzZXJuYW1lOiByZXEuYm9keS51c2VybmFtZVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHVzZXIgPT4ge1xyXG5cdFx0XHRpZiAoICF1c2VyICl7XHJcblx0XHRcdFx0cmVzLnN0YXR1cyg0MDQpLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnVXNlcm5hbWUgZG9lcyBub3QgbWF0Y2ggYW55IGFjY291bnQnfSk7XHJcblx0XHRcdH0gZWxzZSBuZXh0KCk7XHJcblx0XHR9KTtcclxufVxyXG5cdFxyXG4vLyBjaGVjayBpZiB1c2VyIGlkIGV4aXN0cyBcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXNlckV4aXN0KHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0VXNlciBcclxuXHRcdC5maW5kT25lKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRpZDogcmVxLnBhcmFtcy51c2VySWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCB1c2VyID0+IHtcclxuXHRcdFx0aWYgKCF1c2VyKXtcclxuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdVc2VyIGRvZXMgbm90IGV4aXN0J30pO1xyXG5cdFx0XHR9IGVsc2UgbmV4dCgpO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnaW52YWxpZCB1c2VyIGlkOyBpZCBtdXN0IGJlIGFuIGludGVnZXInfSkpO1xyXG59Il19