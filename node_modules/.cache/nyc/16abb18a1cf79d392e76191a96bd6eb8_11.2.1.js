'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.postReview = exports.getReviews = undefined;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Review = _models2.default.Review;

// GET --> api/recipes/<recipeId>/reviews

var getReviews = exports.getReviews = function getReviews(req, res) {
	var recipeId = req.params.recipeId;


	Review.findAll({
		attributes: ['id', 'body', 'createdAt', 'updatedAt'],
		where: {
			recipeId: recipeId
		}
	}).then(function (reviews) {
		var reviewLen = reviews.length;
		if (reviewLen == 0) return res.status(404).json({ success: true, message: 'No review found for this recipe' });
		return res.status(200).json({ success: true, message: reviewLen + ' reviews found', reviews: reviews });
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'Error' });
	});
};

// --> api/recipes/<recipeId>/review
var postReview = exports.postReview = function postReview(req, res) {
	var userId = req.userId;
	var content = req.body.content;
	var recipeId = req.params.recipeId;

	// check if the content of the review is valid 

	if (!content || !content.trim()) return res.status(400).json({ success: false, message: 'Review is required' });
	// check if the user have posted a review on the recipe before
	// a user can only post a review once. 
	Review.findOne({
		where: {
			recipeId: recipeId, userId: userId
		}
	}).then(function (review) {
		if (review) {
			return res.status(403).json({ success: false, message: 'You already wrote a review for this recipe' });
		} else {
			return Review.create({
				userId: userId,
				recipeId: recipeId,
				body: content
			}).then(function () {
				return res.status(200).json({ success: true, message: 'Your review have been recorded successfully' });
			}).catch(function () {
				return res.statu(500).json({ success: false, message: 'Error !' });
			});
		}
	}).catch(function () {
		return res.status(500).json({ success: false, messae: 'Error !' });
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJldmlldy5qcyJdLCJuYW1lcyI6WyJSZXZpZXciLCJnZXRSZXZpZXdzIiwicmVxIiwicmVzIiwicmVjaXBlSWQiLCJwYXJhbXMiLCJmaW5kQWxsIiwiYXR0cmlidXRlcyIsIndoZXJlIiwidGhlbiIsInJldmlld0xlbiIsInJldmlld3MiLCJsZW5ndGgiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJjYXRjaCIsInBvc3RSZXZpZXciLCJ1c2VySWQiLCJjb250ZW50IiwiYm9keSIsInRyaW0iLCJmaW5kT25lIiwicmV2aWV3IiwiY3JlYXRlIiwic3RhdHUiLCJtZXNzYWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0lBRVFBLE0sb0JBQUFBLE07O0FBRVI7O0FBQ08sSUFBTUMsa0NBQWEsU0FBYkEsVUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLEtBQ2hDQyxRQURnQyxHQUNwQkYsSUFBSUcsTUFEZ0IsQ0FDaENELFFBRGdDOzs7QUFHdkNKLFFBQ0VNLE9BREYsQ0FDVTtBQUNSQyxjQUFZLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZSxXQUFmLEVBQTRCLFdBQTVCLENBREo7QUFFUkMsU0FBTztBQUNOSjtBQURNO0FBRkMsRUFEVixFQU9FSyxJQVBGLENBT1EsbUJBQVc7QUFDakIsTUFBTUMsWUFBWUMsUUFBUUMsTUFBMUI7QUFDQSxNQUFJRixhQUFhLENBQWpCLEVBQ0MsT0FBT1AsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsSUFBVixFQUFnQkMsU0FBUyxpQ0FBekIsRUFBckIsQ0FBUDtBQUNELFNBQU9iLElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLElBQVYsRUFBZ0JDLFNBQVlOLFNBQVosbUJBQWhCLEVBQXVEQyxnQkFBdkQsRUFBckIsQ0FBUDtBQUNBLEVBWkYsRUFhRU0sS0FiRixDQWFTO0FBQUEsU0FBTWQsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUSxPQUF6QixFQUFyQixDQUFOO0FBQUEsRUFiVDtBQWNBLENBakJNOztBQW9CUDtBQUNPLElBQU1FLGtDQUFhLFNBQWJBLFVBQWEsQ0FBQ2hCLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQUEsS0FDL0JnQixNQUQrQixHQUNwQmpCLEdBRG9CLENBQy9CaUIsTUFEK0I7QUFBQSxLQUUvQkMsT0FGK0IsR0FFbkJsQixJQUFJbUIsSUFGZSxDQUUvQkQsT0FGK0I7QUFBQSxLQUkvQmhCLFFBSitCLEdBSWxCRixJQUFJRyxNQUpjLENBSS9CRCxRQUorQjs7QUFNdkM7O0FBQ0EsS0FBSyxDQUFDZ0IsT0FBRCxJQUFZLENBQUNBLFFBQVFFLElBQVIsRUFBbEIsRUFDQyxPQUFPbkIsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxvQkFBMUIsRUFBckIsQ0FBUDtBQUNEO0FBQ0E7QUFDQWhCLFFBQ0V1QixPQURGLENBQ1U7QUFDUmYsU0FBTztBQUNOSixxQkFETSxFQUNJZTtBQURKO0FBREMsRUFEVixFQU1FVixJQU5GLENBTVEsa0JBQVU7QUFDaEIsTUFBSWUsTUFBSixFQUFZO0FBQ1gsVUFBT3JCLElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsNENBQTFCLEVBQXJCLENBQVA7QUFDQSxHQUZELE1BRU87QUFDTixVQUFPaEIsT0FBT3lCLE1BQVAsQ0FBYztBQUNwQk4sa0JBRG9CO0FBRXBCZixzQkFGb0I7QUFHcEJpQixVQUFNRDtBQUhjLElBQWQsRUFLTFgsSUFMSyxDQUtDO0FBQUEsV0FBTU4sSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsSUFBVixFQUFnQkMsU0FBUyw2Q0FBekIsRUFBckIsQ0FBTjtBQUFBLElBTEQsRUFNTEMsS0FOSyxDQU1FO0FBQUEsV0FBTWQsSUFBSXVCLEtBQUosQ0FBVSxHQUFWLEVBQWVaLElBQWYsQ0FBb0IsRUFBQ0MsU0FBUyxLQUFWLEVBQWlCQyxTQUFTLFNBQTFCLEVBQXBCLENBQU47QUFBQSxJQU5GLENBQVA7QUFPQTtBQUNELEVBbEJGLEVBbUJFQyxLQW5CRixDQW1CUyxZQUFNO0FBQ2IsU0FBT2QsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQlksUUFBUSxTQUF6QixFQUFyQixDQUFQO0FBQ0EsRUFyQkY7QUFzQkEsQ0FqQ00iLCJmaWxlIjoicmV2aWV3LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1RvYmkvTW9yZS1SZWNpcGVzL3NlcnZlci9jb250cm9sbGVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRiIGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jb25zdCB7IFJldmlldyB9ID0gZGI7XHJcblxyXG4vLyBHRVQgLS0+IGFwaS9yZWNpcGVzLzxyZWNpcGVJZD4vcmV2aWV3c1xyXG5leHBvcnQgY29uc3QgZ2V0UmV2aWV3cyA9IChyZXEsIHJlcykgPT4ge1xyXG5cdGNvbnN0IHtyZWNpcGVJZH0gPSByZXEucGFyYW1zO1xyXG5cclxuXHRSZXZpZXdcclxuXHRcdC5maW5kQWxsKHtcclxuXHRcdFx0YXR0cmlidXRlczogWydpZCcsICdib2R5JywgJ2NyZWF0ZWRBdCcsICd1cGRhdGVkQXQnXSxcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRyZWNpcGVJZFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHJldmlld3MgPT4ge1xyXG5cdFx0XHRjb25zdCByZXZpZXdMZW4gPSByZXZpZXdzLmxlbmd0aDtcclxuXHRcdFx0aWYgKHJldmlld0xlbiA9PSAwKVxyXG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ05vIHJldmlldyBmb3VuZCBmb3IgdGhpcyByZWNpcGUnfSk7XHJcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7c3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogYCR7cmV2aWV3TGVufSByZXZpZXdzIGZvdW5kYCwgcmV2aWV3c30pO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOidFcnJvcid9KSk7XHJcbn07XHJcblxyXG5cclxuLy8gLS0+IGFwaS9yZWNpcGVzLzxyZWNpcGVJZD4vcmV2aWV3XHJcbmV4cG9ydCBjb25zdCBwb3N0UmV2aWV3ID0gKHJlcSwgcmVzKSA9PiB7XHJcblx0Y29uc3QgeyB1c2VySWQgfSA9IHJlcTtcclxuXHRjb25zdCB7IGNvbnRlbnQgfSA9IHJlcS5ib2R5OyBcclxuXHJcblx0Y29uc3QgeyByZWNpcGVJZCB9ID0gcmVxLnBhcmFtcztcclxuXHJcblx0Ly8gY2hlY2sgaWYgdGhlIGNvbnRlbnQgb2YgdGhlIHJldmlldyBpcyB2YWxpZCBcclxuXHRpZiAoICFjb250ZW50IHx8ICFjb250ZW50LnRyaW0oKSApIFxyXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1JldmlldyBpcyByZXF1aXJlZCd9KTtcclxuXHQvLyBjaGVjayBpZiB0aGUgdXNlciBoYXZlIHBvc3RlZCBhIHJldmlldyBvbiB0aGUgcmVjaXBlIGJlZm9yZVxyXG5cdC8vIGEgdXNlciBjYW4gb25seSBwb3N0IGEgcmV2aWV3IG9uY2UuIFxyXG5cdFJldmlld1xyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHJlY2lwZUlkLCB1c2VySWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCByZXZpZXcgPT4ge1xyXG5cdFx0XHRpZiAocmV2aWV3KSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1lvdSBhbHJlYWR5IHdyb3RlIGEgcmV2aWV3IGZvciB0aGlzIHJlY2lwZSd9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gUmV2aWV3LmNyZWF0ZSh7XHJcblx0XHRcdFx0XHR1c2VySWQsXHJcblx0XHRcdFx0XHRyZWNpcGVJZCxcclxuXHRcdFx0XHRcdGJvZHk6IGNvbnRlbnRcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LnRoZW4oICgpID0+IHJlcy5zdGF0dXMoMjAwKS5qc29uKHtzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnWW91ciByZXZpZXcgaGF2ZSBiZWVuIHJlY29yZGVkIHN1Y2Nlc3NmdWxseSd9KSlcclxuXHRcdFx0XHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1KDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdFcnJvciAhJ30pKTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWU6ICdFcnJvciAhJ30pO1xyXG5cdFx0fSk7XHJcbn07Il19