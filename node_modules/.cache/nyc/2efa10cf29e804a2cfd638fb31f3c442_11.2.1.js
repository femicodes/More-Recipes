'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.checkRecipeExist = checkRecipeExist;
exports.checkUsernameExist = checkUsernameExist;
exports.checkUserExist = checkUserExist;

var _models = require('../models');

var _models2 = _interopRequireDefault(_models);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var User = _models2.default.User,
    Recipe = _models2.default.Recipe;
function checkRecipeExist(req, res, next) {
	// console.log(typeof req.params.recipeId);

	var recipeId = req.params.recipeId ? parseInt(req.params.recipeId) : '';
	// console.log(recipeId);
	Recipe.findOne({
		where: {
			id: recipeId
		}
	}).then(function (recipe) {
		if (!recipe) return res.status(404).json({ success: false, message: 'Recipe does not exist' });else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'Invalid recipe id' });
	});
}

// check if username exist !
function checkUsernameExist(req, res, next) {
	var username = req.body.username ? req.body.username.trim() : '';
	if (!username) return res.status(400).json({ success: false, message: 'username and password are required' });

	User.findOne({
		where: {
			username: req.body.username
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'Username does not match any account' });
		} else next();
	});
}

// check if user id exists 
function checkUserExist(req, res, next) {
	User.findOne({
		where: {
			id: req.params.userId
		}
	}).then(function (user) {
		if (!user) {
			res.status(404).json({ success: false, message: 'User does not exist' });
		} else next();
	}).catch(function () {
		return res.status(500).json({ success: false, message: 'invalid user id; id must be an integer' });
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlLmpzIl0sIm5hbWVzIjpbImNoZWNrUmVjaXBlRXhpc3QiLCJjaGVja1VzZXJuYW1lRXhpc3QiLCJjaGVja1VzZXJFeGlzdCIsIlVzZXIiLCJSZWNpcGUiLCJyZXEiLCJyZXMiLCJuZXh0IiwicmVjaXBlSWQiLCJwYXJhbXMiLCJwYXJzZUludCIsImZpbmRPbmUiLCJ3aGVyZSIsImlkIiwidGhlbiIsInJlY2lwZSIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsImNhdGNoIiwidXNlcm5hbWUiLCJib2R5IiwidHJpbSIsInVzZXIiLCJ1c2VySWQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBS2dCQSxnQixHQUFBQSxnQjtRQW9CQUMsa0IsR0FBQUEsa0I7UUFtQkFDLGMsR0FBQUEsYzs7QUE1Q2hCOzs7Ozs7SUFFT0MsSSxvQkFBQUEsSTtJQUFNQyxNLG9CQUFBQSxNO0FBR04sU0FBU0osZ0JBQVQsQ0FBMEJLLEdBQTFCLEVBQStCQyxHQUEvQixFQUFvQ0MsSUFBcEMsRUFBMEM7QUFDaEQ7O0FBRUEsS0FBSUMsV0FBV0gsSUFBSUksTUFBSixDQUFXRCxRQUFYLEdBQXNCRSxTQUFTTCxJQUFJSSxNQUFKLENBQVdELFFBQXBCLENBQXRCLEdBQXNELEVBQXJFO0FBQ0E7QUFDQUosUUFDRU8sT0FERixDQUNVO0FBQ1JDLFNBQU87QUFDTkMsT0FBSUw7QUFERTtBQURDLEVBRFYsRUFNRU0sSUFORixDQU1RLGtCQUFVO0FBQ2hCLE1BQUksQ0FBQ0MsTUFBTCxFQUFhLE9BQU9ULElBQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMsdUJBQTFCLEVBQXJCLENBQVAsQ0FBYixLQUNLWjtBQUNMLEVBVEYsRUFVRWEsS0FWRixDQVVTO0FBQUEsU0FBTWQsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxtQkFBMUIsRUFBckIsQ0FBTjtBQUFBLEVBVlQ7QUFZQTs7QUFFRDtBQUNPLFNBQVNsQixrQkFBVCxDQUE0QkksR0FBNUIsRUFBaUNDLEdBQWpDLEVBQXNDQyxJQUF0QyxFQUE0QztBQUNsRCxLQUFJYyxXQUFXaEIsSUFBSWlCLElBQUosQ0FBU0QsUUFBVCxHQUFtQmhCLElBQUlpQixJQUFKLENBQVNELFFBQVQsQ0FBa0JFLElBQWxCLEVBQW5CLEdBQTZDLEVBQTVEO0FBQ0EsS0FBSyxDQUFDRixRQUFOLEVBQ0MsT0FBT2YsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUSxvQ0FBekIsRUFBckIsQ0FBUDs7QUFFRGhCLE1BQ0VRLE9BREYsQ0FDVTtBQUNSQyxTQUFPO0FBQ05TLGFBQVVoQixJQUFJaUIsSUFBSixDQUFTRDtBQURiO0FBREMsRUFEVixFQU1FUCxJQU5GLENBTVEsZ0JBQVE7QUFDZCxNQUFLLENBQUNVLElBQU4sRUFBWTtBQUNYbEIsT0FBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyxxQ0FBMUIsRUFBckI7QUFDQSxHQUZELE1BRU9aO0FBQ1AsRUFWRjtBQVdBOztBQUVEO0FBQ08sU0FBU0wsY0FBVCxDQUF3QkcsR0FBeEIsRUFBNkJDLEdBQTdCLEVBQWtDQyxJQUFsQyxFQUF3QztBQUM5Q0osTUFDRVEsT0FERixDQUNVO0FBQ1JDLFNBQU87QUFDTkMsT0FBSVIsSUFBSUksTUFBSixDQUFXZ0I7QUFEVDtBQURDLEVBRFYsRUFNRVgsSUFORixDQU1RLGdCQUFRO0FBQ2QsTUFBSSxDQUFDVSxJQUFMLEVBQVU7QUFDVGxCLE9BQUlVLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxTQUFTLEtBQVYsRUFBaUJDLFNBQVMscUJBQTFCLEVBQXJCO0FBQ0EsR0FGRCxNQUVPWjtBQUNQLEVBVkYsRUFXRWEsS0FYRixDQVdTO0FBQUEsU0FBTWQsSUFBSVUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLFNBQVMsS0FBVixFQUFpQkMsU0FBUyx3Q0FBMUIsRUFBckIsQ0FBTjtBQUFBLEVBWFQ7QUFZQSIsImZpbGUiOiJ2YWxpZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Ub2JpL01vcmUtUmVjaXBlcy9zZXJ2ZXIvbWlkZGxld2FyZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYiBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY29uc3Qge1VzZXIsIFJlY2lwZX0gPSBkYjtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZWNpcGVFeGlzdChyZXEsIHJlcywgbmV4dCkge1xyXG5cdC8vIGNvbnNvbGUubG9nKHR5cGVvZiByZXEucGFyYW1zLnJlY2lwZUlkKTtcclxuXHJcblx0bGV0IHJlY2lwZUlkID0gcmVxLnBhcmFtcy5yZWNpcGVJZCA/IHBhcnNlSW50KHJlcS5wYXJhbXMucmVjaXBlSWQpIDogJyc7XHJcblx0Ly8gY29uc29sZS5sb2cocmVjaXBlSWQpO1xyXG5cdFJlY2lwZSBcclxuXHRcdC5maW5kT25lKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRpZDogcmVjaXBlSWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCByZWNpcGUgPT4ge1xyXG5cdFx0XHRpZiAoIXJlY2lwZSkgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1JlY2lwZSBkb2VzIG5vdCBleGlzdCd9KTtcclxuXHRcdFx0ZWxzZSBuZXh0KCk7XHJcblx0XHR9KVxyXG5cdFx0LmNhdGNoKCAoKSA9PiByZXMuc3RhdHVzKDUwMCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdJbnZhbGlkIHJlY2lwZSBpZCd9KSk7XHJcblxyXG59XHJcblxyXG4vLyBjaGVjayBpZiB1c2VybmFtZSBleGlzdCAhXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1VzZXJuYW1lRXhpc3QocmVxLCByZXMsIG5leHQpIHtcclxuXHRsZXQgdXNlcm5hbWUgPSByZXEuYm9keS51c2VybmFtZT8gcmVxLmJvZHkudXNlcm5hbWUudHJpbSgpOiAnJztcclxuXHRpZiAoICF1c2VybmFtZSApIFxyXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTondXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCd9KTtcclxuXHJcblx0VXNlclxyXG5cdFx0LmZpbmRPbmUoe1xyXG5cdFx0XHR3aGVyZToge1xyXG5cdFx0XHRcdHVzZXJuYW1lOiByZXEuYm9keS51c2VybmFtZVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oIHVzZXIgPT4ge1xyXG5cdFx0XHRpZiAoICF1c2VyICl7XHJcblx0XHRcdFx0cmVzLnN0YXR1cyg0MDQpLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnVXNlcm5hbWUgZG9lcyBub3QgbWF0Y2ggYW55IGFjY291bnQnfSk7XHJcblx0XHRcdH0gZWxzZSBuZXh0KCk7XHJcblx0XHR9KTtcclxufVxyXG5cdFxyXG4vLyBjaGVjayBpZiB1c2VyIGlkIGV4aXN0cyBcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXNlckV4aXN0KHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0VXNlciBcclxuXHRcdC5maW5kT25lKHtcclxuXHRcdFx0d2hlcmU6IHtcclxuXHRcdFx0XHRpZDogcmVxLnBhcmFtcy51c2VySWRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKCB1c2VyID0+IHtcclxuXHRcdFx0aWYgKCF1c2VyKXtcclxuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7c3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdVc2VyIGRvZXMgbm90IGV4aXN0J30pO1xyXG5cdFx0XHR9IGVsc2UgbmV4dCgpO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCggKCkgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oe3N1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnaW52YWxpZCB1c2VyIGlkOyBpZCBtdXN0IGJlIGFuIGludGVnZXInfSkpO1xyXG59Il19